import math
import numpy as np

# x_vals = [1, 2, 3, 4, 5]
# y_vals = [1, 3, 2, 4, 3]
#
# n = len(x_vals)
# m = 2
#
# A = np.zeros((n, m + 1))
#
# for i in range(m + 1):
#     for j in range(n):
#         A[j, i] = np.power(x_vals[j], i)
#
# B = A.T @ A
# r = A.T @ y_vals
# c = np.linalg.solve(B, r)
# print(c)

# x_vals = [1, 2, 3, 4, 5]
# y_vals = [1, 3, 2, 4, 3]


def f(x):
    return 1 + math.sin(x)

x_vals = [0.0, 0.10101010101010101, 0.20202020202020202, 0.30303030303030304, 0.40404040404040403, 0.5050505050505051, 0.6060606060606061, 0.7070707070707071, 0.8080808080808081, 0.9090909090909091, 1.0101010101010102, 1.1111111111111112, 1.2121212121212122, 1.3131313131313131, 1.4141414141414141, 1.5151515151515151, 1.6161616161616161, 1.7171717171717171, 1.8181818181818181, 1.9191919191919191, 2.0202020202020203, 2.121212121212121, 2.2222222222222223, 2.323232323232323, 2.4242424242424243, 2.525252525252525, 2.6262626262626263, 2.727272727272727, 2.8282828282828283, 2.929292929292929, 3.0303030303030303, 3.131313131313131, 3.2323232323232323, 3.3333333333333335, 3.4343434343434343, 3.5353535353535355, 3.6363636363636362, 3.7373737373737375, 3.8383838383838382, 3.9393939393939394, 4.040404040404041, 4.141414141414141, 4.242424242424242, 4.343434343434343, 4.444444444444445, 4.545454545454545, 4.646464646464646, 4.747474747474747, 4.848484848484849, 4.94949494949495, 5.05050505050505, 5.151515151515151, 5.252525252525253, 5.353535353535354, 5.454545454545454, 5.555555555555555, 5.656565656565657, 5.757575757575758, 5.858585858585858, 5.959595959595959, 6.0606060606060606, 6.161616161616162, 6.262626262626262, 6.363636363636363, 6.4646464646464645, 6.565656565656566, 6.666666666666667, 6.767676767676767, 6.8686868686868685, 6.96969696969697, 7.070707070707071, 7.171717171717171, 7.2727272727272725, 7.373737373737374, 7.474747474747475, 7.575757575757575, 7.6767676767676765, 7.777777777777778, 7.878787878787879, 7.979797979797979, 8.080808080808081, 8.181818181818182, 8.282828282828282, 8.383838383838384, 8.484848484848484, 8.585858585858587, 8.686868686868687, 8.787878787878787, 8.88888888888889, 8.98989898989899, 9.09090909090909, 9.191919191919192, 9.292929292929292, 9.393939393939394, 9.494949494949495, 9.595959595959595, 9.696969696969697, 9.797979797979798, 9.8989898989899, 10.0]
y_vals = [0.6184707270386722, 1.9790091510611187, 1.9609171320170895, 2.707355513212336, 2.7652175325223416, 2.870535697600933, 2.6163307799275404, 2.4990752603537407, 2.022828985149425, 1.6615866051101733, 1.1232346859976534, 1.2475210926276394, 0.5162425778022202, -0.04350459326219103, -0.572048909780621, -0.7740531469501452, -0.3382096338089383, -0.9020040831976487, 0.034544709444735866, 0.17926319216832443, 0.44634181577866117, 0.7827692776698132, 1.5497073993935309, 2.43350757173312, 2.817545634434258, 3.2858096139915127, 2.774642205214432, 2.706188331012979, 2.377772317648655, 1.9149638140755614, 1.2739108674854642, 0.7088089580215973, 0.1623176843909825, -0.3997710995920829, -0.44943049861971696, -1.0330397866176604, -1.608954426545818, -1.3441905412448572, -1.5135284129475655, -0.9406134750456916, -0.6504595420585285, 0.4294011656739286, 1.1159931794891225, 1.214127248062192, 1.6482877619870169, 2.3873650879199837, 1.9581023660844625, 2.0407772329974465, 2.2752120088996364, 1.3595083266940133, 1.3075534280103418, 0.841666291318242, -0.2791037188646629, -0.2275325920652307, -0.9978247252464634, -1.2095268258130694, -1.6758302258101252, -2.343074802659174, -1.487674552568981, -1.4354377514430787, -1.626848689893366, -0.6913137801941475, 0.12440253483146435, 0.5143973058254045, 0.4291094061549168, 0.7479551069770736, 1.4088437172448023, 1.9550534630503318, 1.2350714753358605, 1.1390162730220204, 1.3616496646788776, 0.13108979309585245, -0.1793201374689669, -1.296761520675472, -1.897900106158333, -1.9414662108673177, -2.1875648637545497, -2.6895868757194124, -2.44309316169165, -2.312162956000109, -2.5679131087014366, -1.873005469741885, -1.391853097916808, -1.2537308889695487, -0.054080379275385004, 0.5972514636703559, 0.1736470129401062, 1.0632096365429051, 0.8466024070328482, 0.45268687771136784, 0.5845040463132025, -0.10298204208951689, -0.5853224127123017, -1.6546203381311386, -2.2674182442377737, -2.457654763610468, -2.9103231602252335, -2.9664217886449804, -3.322048722272889, -3.640877533048799]


n = len(x_vals)
m = 4


def m_row(x):
    row = []
    row.append(1)
    row.append(x)
    row.append(math.sin(3*x))
    row.append(math.log(x + 1))
    return row


C = np.zeros((n, m))

for i in range(n):
    C[i] = m_row(x_vals[i])

# print(C)

B = C.T @ C
r = C.T @ y_vals
c = np.linalg.solve(B, r)

print(c)
